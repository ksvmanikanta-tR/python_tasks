import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from PIL import Image, ImageTk, ImageEnhance, ImageFilter

class PyPhotoshopApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üñºÔ∏è PyPhotoshop - Image Editor")
        self.root.geometry("800x600")

        self.image = None
        self.original = None

        self.canvas = tk.Canvas(root, bg="gray", width=800, height=500)
        self.canvas.pack()

        self.create_buttons()

    def create_buttons(self):
        frame = tk.Frame(self.root)
        frame.pack(pady=10)

        tk.Button(frame, text="Open", command=self.open_image).grid(row=0, column=0, padx=5)
        tk.Button(frame, text="Save", command=self.save_image).grid(row=0, column=1, padx=5)
        tk.Button(frame, text="Reset", command=self.reset_image).grid(row=0, column=2, padx=5)

        tk.Button(frame, text="Rotate Left", command=lambda: self.rotate(-90)).grid(row=0, column=3, padx=5)
        tk.Button(frame, text="Rotate Right", command=lambda: self.rotate(90)).grid(row=0, column=4, padx=5)
        tk.Button(frame, text="Flip Horizontal", command=lambda: self.flip("H")).grid(row=0, column=5, padx=5)
        tk.Button(frame, text="Flip Vertical", command=lambda: self.flip("V")).grid(row=0, column=6, padx=5)

        tk.Button(frame, text="Blur", command=self.apply_blur).grid(row=1, column=0, padx=5, pady=5)
        tk.Button(frame, text="Brightness", command=self.adjust_brightness).grid(row=1, column=1, padx=5)
        tk.Button(frame, text="Contrast", command=self.adjust_contrast).grid(row=1, column=2, padx=5)
        tk.Button(frame, text="Crop", command=self.crop_image).grid(row=1, column=3, padx=5)

    def open_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Images", "*.png *.jpg *.jpeg *.bmp")])
        if file_path:
            self.image = Image.open(file_path)
            self.original = self.image.copy()
            self.display_image()

    def save_image(self):
        if self.image:
            path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG", "*.png"), ("JPG", "*.jpg")])
            if path:
                self.image.save(path)
                messagebox.showinfo("Saved", f"Image saved to {path}")
        else:
            messagebox.showerror("Error", "No image to save.")

    def reset_image(self):
        if self.original:
            self.image = self.original.copy()
            self.display_image()

    def display_image(self):
        img_resized = self.image.resize((800, 500), Image.Resampling.LANCZOS)
        self.tk_img = ImageTk.PhotoImage(img_resized)
        self.canvas.create_image(0, 0, anchor="nw", image=self.tk_img)

    def rotate(self, angle):
        if self.image:
            self.image = self.image.rotate(angle, expand=True)
            self.display_image()

    def flip(self, direction):
        if self.image:
            if direction == "H":
                self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
            elif direction == "V":
                self.image = self.image.transpose(Image.FLIP_TOP_BOTTOM)
            self.display_image()

    def apply_blur(self):
        if self.image:
            self.image = self.image.filter(ImageFilter.GaussianBlur(2))
            self.display_image()

    def adjust_brightness(self):
        if self.image:
            factor = simpledialog.askfloat("Brightness", "Enter brightness factor (e.g., 1.2 for brighter, <1 for darker):", minvalue=0.1, maxvalue=3.0)
            if factor:
                enhancer = ImageEnhance.Brightness(self.image)
                self.image = enhancer.enhance(factor)
                self.display_image()

    def adjust_contrast(self):
        if self.image:
            factor = simpledialog.askfloat("Contrast", "Enter contrast factor (e.g., 1.5 for more contrast):", minvalue=0.1, maxvalue=3.0)
            if factor:
                enhancer = ImageEnhance.Contrast(self.image)
                self.image = enhancer.enhance(factor)
                self.display_image()

    def crop_image(self):
        if self.image:
            left = simpledialog.askinteger("Crop", "Enter left:")
            top = simpledialog.askinteger("Crop", "Enter top:")
            right = simpledialog.askinteger("Crop", "Enter right:")
            bottom = simpledialog.askinteger("Crop", "Enter bottom:")

            if None not in (left, top, right, bottom):
                self.image = self.image.crop((left, top, right, bottom))
                self.display_image()

# üîÅ Main loop
if __name__ == "__main__":
    root = tk.Tk()
    app = PyPhotoshopApp(root)
    root.mainloop()
