import cv2
import numpy as np

def empty(a):
    pass

# üß™ Create a window with trackbars
cv2.namedWindow("HSV Trackbars")
cv2.resizeWindow("HSV Trackbars", 640, 240)

cv2.createTrackbar("Hue Min", "HSV Trackbars", 0, 179, empty)
cv2.createTrackbar("Hue Max", "HSV Trackbars", 179, 179, empty)
cv2.createTrackbar("Sat Min", "HSV Trackbars", 0, 255, empty)
cv2.createTrackbar("Sat Max", "HSV Trackbars", 255, 255, empty)
cv2.createTrackbar("Val Min", "HSV Trackbars", 0, 255, empty)
cv2.createTrackbar("Val Max", "HSV Trackbars", 255, 255, empty)

# üé• Open webcam
cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)

while True:
    success, img = cap.read()
    if not success:
        print("‚ùå Failed to grab frame from webcam")
        break

    imgHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    # üß≠ Read values from trackbars
    h_min = cv2.getTrackbarPos("Hue Min", "HSV Trackbars")
    h_max = cv2.getTrackbarPos("Hue Max", "HSV Trackbars")
    s_min = cv2.getTrackbarPos("Sat Min", "HSV Trackbars")
    s_max = cv2.getTrackbarPos("Sat Max", "HSV Trackbars")
    v_min = cv2.getTrackbarPos("Val Min", "HSV Trackbars")
    v_max = cv2.getTrackbarPos("Val Max", "HSV Trackbars")

    lower = np.array([h_min, s_min, v_min])
    upper = np.array([h_max, s_max, v_max])
    mask = cv2.inRange(imgHSV, lower, upper)
    result = cv2.bitwise_and(img, img, mask=mask)

    # üì∏ Show all 3 views: original, mask, result
    cv2.imshow("Webcam Feed", img)
    cv2.imshow("Mask", mask)
    cv2.imshow("Result", result)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
